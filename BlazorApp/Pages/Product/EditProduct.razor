@page "/product/{ProductId?}"
@using BlazorApp.Utils;
@inject NavigationManager navigationManager;
@inject ILogger<Product> Logger
@inject IRepository<Product> productService;
@inject IRepository<Category> categoryService;
@inject IToastService toastService


<HeaderPage Title="@title" RouteNavigation="/products" TextButton="Back"></HeaderPage>

<EditForm Model="@product" OnSubmit="@Save">
    <div class="row">
        <div class="col-8 form-group">
            <label for="title" class="col-form-label"> Title</label>

            <InputText id="title" @bind-Value="product.Title" required class="form-control" />
        </div>
        <div class="col form-group">
            <label for="price" class="col-form-label">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" min="0" required class="form-control" />
        </div>
    </div>
    <div class="row">
        <div class="col form-group">
            <label for="category" class="col-form-label">Category</label>
            <InputSelect id="category" @bind-Value="product.CategoryId" required class="form-control">
                <option>Select category...</option>
                @if (categories != null)
                {
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }

                }
            </InputSelect>
        </div>
        <div class="col form-group">
            <label for="image" class="col-form-label">Image (Url)</label>
            <InputText id="image" @bind-Value="product.Image" required class="form-control" />
        </div>
    </div>
    <div class="form-group">
        <label for="description" class="col-form-label">Description</label>
        <InputTextArea id="description" @bind-Value="product.Description" required class="form-control"></InputTextArea>
    </div>

    <hr />
    <button class="btn btn-primary" type="submit">Save</button>
</EditForm>

@code {

    [Parameter]
    public string ProductId { get; set; }

    private Product product = new();
    private IEnumerable<Category> categories;
    private string title = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.Get();
    }

    protected override async Task OnParametersSetAsync()
    {
        product = string.IsNullOrEmpty(ProductId) ? new() : await productService.GetById(int.Parse(ProductId));
        title = string.IsNullOrEmpty(ProductId) ? "Add Product" : "Edit Product";
    }


    private async Task Save()
    {
        product.Images = new Uri[1] { new Uri(product.Image) };

        if (string.IsNullOrEmpty(ProductId))
        {
            await productService.Add(product);
            PageUtils.ValidateResult(navigationManager, toastService, categoryService.Message, "/products", $"Producto {product.Title} Added");
        }
        else
        {
            await productService.Update(product);
            PageUtils.ValidateResult(navigationManager, toastService, categoryService.Message, "/products", $"Producto {product.Title} Updated");
        }


    }


}
